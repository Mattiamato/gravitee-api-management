version: 2.1
orbs:
    snyk: snyk/snyk@1.1.2
    slack: circleci/slack@4.8.1
commands:
    docker-scan:
        parameters:
            docker-image-name:
                type: string
                default: ""
                description: The name of the docker image to scan (without the version)
            version:
                type: string
                default: ""
                description: Version of the docker image to scan    
        steps:
          - run:
              name: install-nodesource-nodejs-snyk
              command: |     
                curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                sudo apt install nodejs
                sudo npm install snyk -g                          
                snyk --help
                snyk auth $SNYK_TOKEN
          - run: # run snyk container monitor
              name: snyk container monitor
              command: |
                snyk container test << parameters.docker-image-name >>:<< parameters.version >> --app-vulns -d
    notify-snyk-result:
      steps:
          - slack/notify:
                channel: 'devsecops'
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "```${SLACK_MESSAGE}```"
                       },
                       "accessory": {
                         "type": "button",
                         "text": {
                           "type": "plain_text",
                           "text": "Click here for scan details",
                           "emoji": true
                         },
                         "value": "click_me_123",
                         "url": "${CIRCLE_BUILD_URL}",
                         "action_id": "button-action"                    
                        }
                      }
                    ]
                  }
                event: always   


jobs:       
    publish_prod_docker_images:
        parameters:
            dry_run:
                type: boolean
                default: true
            enterprise_edition:
                default: false
                type: boolean
            graviteeio_version:
                default: "3"
                type: string              
        docker:
            #- image: cimg/base:stable
            - image: cimg/openjdk:17.0.1
        steps:
            - when:
                  condition:
                      equal: [false, << parameters.dry_run >>]
                  steps:
                      - docker-scan:
                            docker-image-name: graviteeio/apim-management-api
                            version: << parameters.graviteeio_version >><<# parameters.enterprise_edition >>-ee<</ parameters.enterprise_edition >>
                            #echo << parameters.version >>
            - run:
                when: always
                name: Generate last log lines for slack message
                command: |
                  API_URL=$(echo $CIRCLE_BUILD_URL | cut -d/ -f4-7)
                  FAILED_STEP=$(curl "https://circleci.com/api/v1.1/project/${API_URL}?circle-token=${CIRCLE_API_TOKEN}" | jq '.steps | .[] | flatten | map(select(.name? == "snyk container monitor")) | .[] | {allocation_id, step}')
                  ALLOCATION_ID=$(echo "${FAILED_STEP}" | jq -r '.allocation_id')
                  STEP=$(echo "${FAILED_STEP}" | jq -r '.step')
                  curl -o slack_response.txt "https://circleci.com/api/v1.1/project/${API_URL}/output/${STEP}/0?file=true&allocation-id=${ALLOCATION_ID}&circle-token=$CIRCLE_API_TOKEN"
                  sed -i 's/\r$//g' slack_response.txt
                  SLACK_MESSAGE=$(cat slack_response.txt | tail -n 1 | sed '$!s/$/\\n/' | tr -d '\n')
                  echo ${SLACK_MESSAGE}
                  echo "export SLACK_MESSAGE='${SLACK_MESSAGE}'" >> $BASH_ENV
            - notify-snyk-result     
workflows:
    pull_requests:
        jobs:
            - publish_prod_docker_images:
                 dry_run: false
                 graviteeio_version: "3.15"
                 enterprise_edition: true
           
